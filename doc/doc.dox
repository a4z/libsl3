
/*!
\mainpage A C++ interface for SQLite

\tableofcontents

libsl3 enables efficient communication with <a href="https://www.sqlite.org">SQLite3</a> databases using the natural approach, SQL.<BR>
The library does not attempt to function as an ORM (Object-Relational Mapping) and does not introduce C++ syntax resembling SQL for interacting with a SQLite database. <BR>
Reading from and writing to a database is accomplished through SQL and prepared commands, also known as stored procedures.<BR>
The library fully supports the SQLite duck typing concept, but it also offers a means to incorporate type checking when communicating with a database.

\section History

libsl3 started as a C++98 project a long time ago.
Later, when C++11 was new, it became <i>a modern C++11 interface to SQLite</i>.
Today, libsl3 is still around: a C++ interface for SQLite.
Active development happens rarely, but the library is still maintained and updated when required.

\section Installation

libsl3 can be built and consumed without any external dependencies, but you might want to use the sqlite3 installation from your system.

\subsection consume Consuming sl3 in a CMake project

An easy way to consume sl3 is via CMake's `FetchContent`.

\code
cmake_minimum_required(VERSION 3.29)

project(consume_sl3)

set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 20)

include(FetchContent)
FetchContent_Declare(
  sl3
  GIT_REPOSITORY https://github.com/a4z/libsl3.git
  GIT_TAG        main
  OVERRIDE_FIND_PACKAGE
)
SET(BUILD_TESTING OFF)
SET(sl3_USE_INTERNAL_SQLITE3 ON)
SET(sl3_USE_COMMON_COMPILER_WARNINGS OFF)

find_package(sl3 CONFIG REQUIRED)

add_executable(consume_sl3 main.cpp)
target_link_libraries(consume_sl3 PRIVATE sl3)
\endcode

If you want to use the system sqlite3 installation, you can omit the line
`SET(sl3_USE_INTERNAL_SQLITE3 ON)`

\section build_from_source Building sl3 from source

Get your copy of the source code from the <a href="https://github.com/a4z/libsl3">libsl3 GitHub repository</a>.

The project has the following dependencies:
\li The minimum required C++ standard is C++17 (planned to go to 20 soon)
\li Required: <a href="https://cmake.org">CMake</a> for building the library
\li Optional: <a href="https://www.sqlite.org">SQLite3</a>, sqlite is included in the source code
\li Optional: <a href="https://www.doxygen.nl">doxygen</a> for building the documentation
\li Optional: <a href="https://github.com/doctest/doctest">doctest</a> for unit testing

\subsection deal_dependencies Dependency management

There are 3 options to deal with dependencies.

\li Ignore them, and turn them off. (No testing and internal sqlite3)
\li Use vcpkg, a package manager for C++ libraries
\li Use CMake's FetchContent to fetch the dependencies

If doxygen is not found, it will not be possible to build the documentation.

See below for how to use either vcpkg or FetchContent.

\subsection build Building the library (developer mode)

The library can be built with CMake. No surprises here.

If you use vcpkg, the easiest way to build the library is:

\code
cmake --preset ninja -DTOOLCHAIN_INCLUDES=toolchain/use-vcpkg
cmake --build --preset ninja
ctest --preset ninja
\endcode

There is also an Xcode preset for macOS, and an MSVC22 preset for Windows.

MacOS:
\code
cmake --preset xcode -DTOOLCHAIN_INCLUDES=toolchain/use-vcpkg
cmake --build --preset xcode
ctest --preset xcode
\endcode

Windows:
\code
cmake --preset msvc22 -DTOOLCHAIN_INCLUDES=toolchain/use-vcpkg
cmake --build --preset msvc22
ctest --preset msvc22
\endcode

In case you do not have vcpkg installed, the most simple way to get started is

\code
cmake --preset ninja -DPROJECT_ADDONS=add-on/fetch-dependencies -Dsl3_USE_INTERNAL_SQLITE3=ON
\endcode

If you have sqlite3 installed on your system, you can use it by omitting `-Dsl3_USE_INTERNAL_SQLITE3=ON`.


<b>CMake options to control the build process:</b>

\li \c sl3_USE_INTERNAL_SQLITE3:<BR>
If set to ON, the internal sqlite3 source code will be used.<BR>
If set to OFF, the system sqlite3 will be used.<BR>
Default is ON.

\li \c sl3_BUILD_TESTING:<BR>
If set to ON, test targets will be added.<BR>
Default is ON.


For the internal sqlite distribution there are
<a href="https://github.com/a4z/libsl3/blob/main/sqlite/setup_sqlite3.cmake#L3">several options to configure sqlite3</a> available.

<b>Advantages of using the internal sqlite3</b>

\li No external dependencies.
\li sqlite3 is used in the tested version
\li consuming libsl3 becomes easier

Programs consuming libsl3 do not need to link against sqlite3.

<b>Disadvantages using the internal sqlite3</b>

\li A bigger library
\li Slightly longer build time for building libsl3
(not for programs consuming libsl3)

\subsection Testing

All the tests can be found in the tests subdirectory. <BR>
Existing tests try to cover as much as possible, see the <a href=coverage/index.html>coverage report</a> for details.


\section overview Usage Overview

A database is represented via sl3::Database. <BR>
A database can execute SQL strings to read or write data. <BR>

An sl3::Command is a compiled SQL statement which can contain parameters. <BR>
Parameters are sl3::DbValues, a sl3::Container of sl3::DbValue instances. <BR>

sl3::DbValues can also be used to receive data from a database. <BR>
Requesting data from a database will return a sl3::Dataset with rows
of sl3::DbValues where each field is a \ref dbvalue.

Another and fully customizable way to receive data from a database is
covered in the \ref rowcallback section.


\subsection overview_example A first example

\include main1.cpp

Since the ostream operator for sl3::DbValue is overloaded, this will print

\code
1 one 1.1
2 two 2.1
\endcode

<BR>

\section database sl3::Database

sl3::Database encapsulates a SQLite database. <BR>
It can be directly used, but it has also a virtual destructor and can be used
as a base class.

\section value_types Types in libsl3

The types in libsl3 are those which are available in
  <a href="https://www.sqlite.org/datatype3.html">the datatypes that SQLite provides</a>.

- sl3::Type::Int stands for an int64_t.
- sl3::Type::Real stands for a double.
- sl3::Type::Text stands for a std::string.
- sl3::Type::Blob stands for a sl3::Blob, a char vector

Since a database value can also be NULL, there is a type for it.
- sl3::Type::Null, a null value.

There is one additional sl3::Type.  <BR>
In sqlite a column can hold different types and libsl3 supports this concept.
- sl3::Type::Variant , any value type.

See \ref dbvalue for more information.

\note
Text is a UTF-8 string since this is a good default and keeps things simple.<BR>
If UTF-16 string types are wanted, this needs to be implemented separately.
The same is true for the special endianness functions sqlite provides.<BR>
There are two ways to do this: write your own sl3::RowCallback or sl3::Command::Callback.
See \ref rowcallback for more information.<BR>
If you think one of these features should be supported by the library please file
a feature request in the issue tracker.

\section dbvalue sl3::DbValue

This class can be used to read from and write to a sl3::Database. <BR>
An sl3::DbValue can hold different types. It can be defined if any type
is allowed for an instance or only a certain one.<BR>

There are two sl3::Type properties.
One defines the type rule, the other the type value.

- sl3::DbValue::dbtype: The type rule<BR>
This property is assigned at creation and cannot be changed.<BR>
If the type is sl3::Type::Variant the instance can hold any type,
otherwise only the specified type is allowed, one of: <BR>
sl3::Type::Int, sl3::Type::Real, sl3::Type::Text, sl3::Type::Blob
<BR>
<BR>
- sl3::DbValue::getStorageType: The current value type<BR>
This property depends on the actual value<BR>
If the type is sl3::Type::Variant values of any type can be used,
otherwise it has to be the type specified. <BR>
If sl3::DbValue::isNull returns true, the storage type is also sl3::Type::Null.

Both properties are used to validate reads and writes at runtime. <BR>
If a value is set or read that is not allowed by the type property
an sl3::ErrTypeMisMatch exception is thrown.

\subsection value_types_and_null Using sl3::DbValues

Setting a value can be done via
- sl3::DbValue::set
or the assignment operator.<BR>
If an invalid type is set, a sl3::ErrTypeMisMatch will be thrown.

sl3::DbValue::setNull can be used to set a value to Null.

There are getters for each type
- sl3::DbValue::getInt
- sl3::DbValue::getReal
- sl3::DbValue::getText
- sl3::DbValue::getBlob

There are two versions of each of these functions. With and without a default value
as argument.
<BR>
The version without a default value will throw a sl3::ErrNullValueAccess
exception if sl3::DbValue::isNull is true for the instance. <BR>
The version with a default value as argument will return the passed argument
if the current sl3::DbValue::isNull.

If a type getter is used for the wrong storage type a sl3::ErrTypeMisMatch
exception is thrown.

- sl3::DbValue::get

Additionally, there is a sl3::DbValue::get version which will never throw.<BR>
This function always requires a default value which has to be one of the four value
types. <BR>

If the type is incorrect or the value is Null, the given default value will be
returned.

\subsection val_example Example

\include main4.cpp
This example will print
\code
2
sl3::TypeMisMatch:Int!=Text
example
\endcode


\section command  sl3::Command

An sl3::Command is a compiled SQL statement which can contain parameters. <BR>
sl3::Database::prepare creates a command. <BR>
If a command has parameters the types are specified at creation.

A command can return data or not, depending on the SQL that is used. <BR>
An insert or update statement does not return data, while a select statement
does. <BR>
A command has therefore 2 ways to run it.
- sl3::Command::execute, no return data
- sl3::Command::select returns data.

\subsection type_example_1  Parameter types

In the \ref overview_example overview example all sl3::Command parameters have
been of type sl3::Type::Variant since nothing was specified. <BR>
But it can be ensured that certain types are used.

\include main2.cpp
The output of this program will be:
\code
sl3::TypeMisMatch:Int=Text
\endcode


It is not a problem to insert different types into a column,
sqlite supports this and so does libsl3 <BR>
But it might be unwanted and can therefore be turned off.

<BR>

\section dataset sl3::Dataset

A sl3::Dataset is a generic way to receive data from a sl3::Database.

It is returned by a sl3::Command::select or sl3::Database::select


\subsection type_example_2  Create a sl3::Dataset

If there are different types in a column, a sl3::Dataset will automatically
provide the correct sl3::DbValue objects.

\include main3.cpp

Running this program will print

\code
  Variant/Int: 1, Variant/Text: one, Variant/Real: 1.1,
  Variant/Text: some text, Variant/Text: two, Variant/Real: 2.1,
\endcode


\subsection type_example_3  Ensure types for a sl3::Dataset

It might be undesirable to get different types for one column into a sl3::Dataset. <BR>
This can be ensured by passing the allowed sl3::Types to the
sl3::Database::select call. <BR>
If the wanted types are not those in the table, an sl3::TypeMisMatch
exception is thrown.

\include main5.cpp

This code will throw an exception, as expected and print
\code
sl3::TypeMisMatch:Int not one of the required types
\endcode

<BR>

\section rowcallback RowCallback and Callback functions

A custom way to handle query results is to use
an sl3::RowCallback or the sl3::Command::Callback function. <BR>
They can be passed to the sl3::Database::execute and sl3::Command::execute
function.<BR>
The callback will be called with an sl3::Columns representing the current row
for each row in the query result.<BR>
The callback returns whether it wants to proceed to be called again.

\subsection columns sl3::Columns

In a callback the sl3::Columns class gives access to the current row. <BR>
There are several methods to query the type, size and get the values. <BR>


\subsection columns_example Example

\include main6.cpp

Running this program, the output will be

\code
1_one
2_two
\endcode

*/






















